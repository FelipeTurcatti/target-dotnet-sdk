// <auto-generated/>
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Adobe.Target.Delivery.Client;
using Adobe.Target.Delivery.Model;

namespace Adobe.Target.Delivery.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Target offers
        /// </summary>
        /// <exception cref="Adobe.Target.Delivery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imsOrgId">The IMS organization ID</param>
        /// <param name="sessionId">This is the &#x60;sessionId&#x60; that should be generated and maintained by the API user for the current session the user is a part of. The &#x60;sessionId&#x60; can be any printable string except a space, ?, or /. It should be between 1 and 128 characters in length. &lt;br&gt;&lt;br&gt; For a particular session, its value must stay the same across multiple requests for the same user since routing to a particular node in the edge cluster, which contains the user profile, is done using the &#x60;sessionId&#x60;. The session is active for 30 minutes on the server side. Therefore, you shouldn’t use a different &#x60;sessionId&#x60; for a particular &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; within 30 minutes of the last request made with the same &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60;. Otherwise, changes to the profile could be inconsistent and unpredictable. &lt;br&gt;&lt;br&gt;Furthermore, using the same &#x60;sessionId&#x60; with different &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; may cause unpredictable changes to the profiles.</param>
        /// <param name="deliveryRequest">Delivery Request</param>
        /// <param name="version">This is the &#x60;version&#x60; of at.js. (optional)</param>
        /// <returns>DeliveryResponse</returns>
        DeliveryResponse Execute(string imsOrgId, string sessionId, DeliveryRequest deliveryRequest, string version = default(string));

        /// <summary>
        /// Retrieve Target offers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Adobe.Target.Delivery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imsOrgId">The IMS organization ID</param>
        /// <param name="sessionId">This is the &#x60;sessionId&#x60; that should be generated and maintained by the API user for the current session the user is a part of. The &#x60;sessionId&#x60; can be any printable string except a space, ?, or /. It should be between 1 and 128 characters in length. &lt;br&gt;&lt;br&gt; For a particular session, its value must stay the same across multiple requests for the same user since routing to a particular node in the edge cluster, which contains the user profile, is done using the &#x60;sessionId&#x60;. The session is active for 30 minutes on the server side. Therefore, you shouldn’t use a different &#x60;sessionId&#x60; for a particular &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; within 30 minutes of the last request made with the same &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60;. Otherwise, changes to the profile could be inconsistent and unpredictable. &lt;br&gt;&lt;br&gt;Furthermore, using the same &#x60;sessionId&#x60; with different &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; may cause unpredictable changes to the profiles.</param>
        /// <param name="deliveryRequest">Delivery Request</param>
        /// <param name="version">This is the &#x60;version&#x60; of at.js. (optional)</param>
        /// <returns>ApiResponse of DeliveryResponse</returns>
        ApiResponse<DeliveryResponse> ExecuteWithHttpInfo(string imsOrgId, string sessionId, DeliveryRequest deliveryRequest, string version = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Target offers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Adobe.Target.Delivery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imsOrgId">The IMS organization ID</param>
        /// <param name="sessionId">This is the &#x60;sessionId&#x60; that should be generated and maintained by the API user for the current session the user is a part of. The &#x60;sessionId&#x60; can be any printable string except a space, ?, or /. It should be between 1 and 128 characters in length. &lt;br&gt;&lt;br&gt; For a particular session, its value must stay the same across multiple requests for the same user since routing to a particular node in the edge cluster, which contains the user profile, is done using the &#x60;sessionId&#x60;. The session is active for 30 minutes on the server side. Therefore, you shouldn’t use a different &#x60;sessionId&#x60; for a particular &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; within 30 minutes of the last request made with the same &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60;. Otherwise, changes to the profile could be inconsistent and unpredictable. &lt;br&gt;&lt;br&gt;Furthermore, using the same &#x60;sessionId&#x60; with different &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; may cause unpredictable changes to the profiles.</param>
        /// <param name="deliveryRequest">Delivery Request</param>
        /// <param name="version">This is the &#x60;version&#x60; of at.js. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeliveryResponse</returns>
        System.Threading.Tasks.Task<DeliveryResponse> ExecuteAsync(string imsOrgId, string sessionId, DeliveryRequest deliveryRequest, string version = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Target offers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Adobe.Target.Delivery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imsOrgId">The IMS organization ID</param>
        /// <param name="sessionId">This is the &#x60;sessionId&#x60; that should be generated and maintained by the API user for the current session the user is a part of. The &#x60;sessionId&#x60; can be any printable string except a space, ?, or /. It should be between 1 and 128 characters in length. &lt;br&gt;&lt;br&gt; For a particular session, its value must stay the same across multiple requests for the same user since routing to a particular node in the edge cluster, which contains the user profile, is done using the &#x60;sessionId&#x60;. The session is active for 30 minutes on the server side. Therefore, you shouldn’t use a different &#x60;sessionId&#x60; for a particular &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; within 30 minutes of the last request made with the same &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60;. Otherwise, changes to the profile could be inconsistent and unpredictable. &lt;br&gt;&lt;br&gt;Furthermore, using the same &#x60;sessionId&#x60; with different &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; may cause unpredictable changes to the profiles.</param>
        /// <param name="deliveryRequest">Delivery Request</param>
        /// <param name="version">This is the &#x60;version&#x60; of at.js. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeliveryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeliveryResponse>> ExecuteWithHttpInfoAsync(string imsOrgId, string sessionId, DeliveryRequest deliveryRequest, string version = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryApi : IDeliveryApiSync, IDeliveryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeliveryApi : IDeliveryApi
    {
        private Adobe.Target.Delivery.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeliveryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeliveryApi(String basePath)
        {
            this.Configuration = Adobe.Target.Delivery.Client.Configuration.MergeConfigurations(
                Adobe.Target.Delivery.Client.GlobalConfiguration.Instance,
                new Adobe.Target.Delivery.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Adobe.Target.Delivery.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Adobe.Target.Delivery.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Adobe.Target.Delivery.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeliveryApi(Adobe.Target.Delivery.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Adobe.Target.Delivery.Client.Configuration.MergeConfigurations(
                Adobe.Target.Delivery.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Adobe.Target.Delivery.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Adobe.Target.Delivery.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Adobe.Target.Delivery.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeliveryApi(Adobe.Target.Delivery.Client.ISynchronousClient client, Adobe.Target.Delivery.Client.IAsynchronousClient asyncClient, Adobe.Target.Delivery.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Adobe.Target.Delivery.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Adobe.Target.Delivery.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Adobe.Target.Delivery.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Adobe.Target.Delivery.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Adobe.Target.Delivery.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Target offers 
        /// </summary>
        /// <exception cref="Adobe.Target.Delivery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imsOrgId">The IMS organization ID</param>
        /// <param name="sessionId">This is the &#x60;sessionId&#x60; that should be generated and maintained by the API user for the current session the user is a part of. The &#x60;sessionId&#x60; can be any printable string except a space, ?, or /. It should be between 1 and 128 characters in length. &lt;br&gt;&lt;br&gt; For a particular session, its value must stay the same across multiple requests for the same user since routing to a particular node in the edge cluster, which contains the user profile, is done using the &#x60;sessionId&#x60;. The session is active for 30 minutes on the server side. Therefore, you shouldn’t use a different &#x60;sessionId&#x60; for a particular &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; within 30 minutes of the last request made with the same &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60;. Otherwise, changes to the profile could be inconsistent and unpredictable. &lt;br&gt;&lt;br&gt;Furthermore, using the same &#x60;sessionId&#x60; with different &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; may cause unpredictable changes to the profiles.</param>
        /// <param name="deliveryRequest">Delivery Request</param>
        /// <param name="version">This is the &#x60;version&#x60; of at.js. (optional)</param>
        /// <returns>DeliveryResponse</returns>
        public DeliveryResponse Execute(string imsOrgId, string sessionId, DeliveryRequest deliveryRequest, string version = default(string))
        {
            Adobe.Target.Delivery.Client.ApiResponse<DeliveryResponse> localVarResponse = ExecuteWithHttpInfo(imsOrgId, sessionId, deliveryRequest, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Target offers 
        /// </summary>
        /// <exception cref="Adobe.Target.Delivery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imsOrgId">The IMS organization ID</param>
        /// <param name="sessionId">This is the &#x60;sessionId&#x60; that should be generated and maintained by the API user for the current session the user is a part of. The &#x60;sessionId&#x60; can be any printable string except a space, ?, or /. It should be between 1 and 128 characters in length. &lt;br&gt;&lt;br&gt; For a particular session, its value must stay the same across multiple requests for the same user since routing to a particular node in the edge cluster, which contains the user profile, is done using the &#x60;sessionId&#x60;. The session is active for 30 minutes on the server side. Therefore, you shouldn’t use a different &#x60;sessionId&#x60; for a particular &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; within 30 minutes of the last request made with the same &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60;. Otherwise, changes to the profile could be inconsistent and unpredictable. &lt;br&gt;&lt;br&gt;Furthermore, using the same &#x60;sessionId&#x60; with different &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; may cause unpredictable changes to the profiles.</param>
        /// <param name="deliveryRequest">Delivery Request</param>
        /// <param name="version">This is the &#x60;version&#x60; of at.js. (optional)</param>
        /// <returns>ApiResponse of DeliveryResponse</returns>
        public Adobe.Target.Delivery.Client.ApiResponse<DeliveryResponse> ExecuteWithHttpInfo(string imsOrgId, string sessionId, DeliveryRequest deliveryRequest, string version = default(string))
        {
            // verify the required parameter 'imsOrgId' is set
            if (imsOrgId == null)
                throw new Adobe.Target.Delivery.Client.ApiException(400, "Missing required parameter 'imsOrgId' when calling DeliveryApi->Execute");

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new Adobe.Target.Delivery.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DeliveryApi->Execute");

            // verify the required parameter 'deliveryRequest' is set
            if (deliveryRequest == null)
                throw new Adobe.Target.Delivery.Client.ApiException(400, "Missing required parameter 'deliveryRequest' when calling DeliveryApi->Execute");

            Adobe.Target.Delivery.Client.RequestOptions localVarRequestOptions = new Adobe.Target.Delivery.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Adobe.Target.Delivery.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Adobe.Target.Delivery.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Adobe.Target.Delivery.Client.ClientUtils.ParameterToMultiMap("", "imsOrgId", imsOrgId));
            localVarRequestOptions.QueryParameters.Add(Adobe.Target.Delivery.Client.ClientUtils.ParameterToMultiMap("", "sessionId", sessionId));
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Adobe.Target.Delivery.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            localVarRequestOptions.Data = deliveryRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeliveryResponse>("/rest/v1/delivery", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Execute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Target offers 
        /// </summary>
        /// <exception cref="Adobe.Target.Delivery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imsOrgId">The IMS organization ID</param>
        /// <param name="sessionId">This is the &#x60;sessionId&#x60; that should be generated and maintained by the API user for the current session the user is a part of. The &#x60;sessionId&#x60; can be any printable string except a space, ?, or /. It should be between 1 and 128 characters in length. &lt;br&gt;&lt;br&gt; For a particular session, its value must stay the same across multiple requests for the same user since routing to a particular node in the edge cluster, which contains the user profile, is done using the &#x60;sessionId&#x60;. The session is active for 30 minutes on the server side. Therefore, you shouldn’t use a different &#x60;sessionId&#x60; for a particular &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; within 30 minutes of the last request made with the same &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60;. Otherwise, changes to the profile could be inconsistent and unpredictable. &lt;br&gt;&lt;br&gt;Furthermore, using the same &#x60;sessionId&#x60; with different &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; may cause unpredictable changes to the profiles.</param>
        /// <param name="deliveryRequest">Delivery Request</param>
        /// <param name="version">This is the &#x60;version&#x60; of at.js. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeliveryResponse</returns>
        public async System.Threading.Tasks.Task<DeliveryResponse> ExecuteAsync(string imsOrgId, string sessionId, DeliveryRequest deliveryRequest, string version = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Adobe.Target.Delivery.Client.ApiResponse<DeliveryResponse> localVarResponse = await ExecuteWithHttpInfoAsync(imsOrgId, sessionId, deliveryRequest, version, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Target offers 
        /// </summary>
        /// <exception cref="Adobe.Target.Delivery.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imsOrgId">The IMS organization ID</param>
        /// <param name="sessionId">This is the &#x60;sessionId&#x60; that should be generated and maintained by the API user for the current session the user is a part of. The &#x60;sessionId&#x60; can be any printable string except a space, ?, or /. It should be between 1 and 128 characters in length. &lt;br&gt;&lt;br&gt; For a particular session, its value must stay the same across multiple requests for the same user since routing to a particular node in the edge cluster, which contains the user profile, is done using the &#x60;sessionId&#x60;. The session is active for 30 minutes on the server side. Therefore, you shouldn’t use a different &#x60;sessionId&#x60; for a particular &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; within 30 minutes of the last request made with the same &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60;. Otherwise, changes to the profile could be inconsistent and unpredictable. &lt;br&gt;&lt;br&gt;Furthermore, using the same &#x60;sessionId&#x60; with different &#x60;tntId&#x60; or &#x60;thirdPartyId&#x60; may cause unpredictable changes to the profiles.</param>
        /// <param name="deliveryRequest">Delivery Request</param>
        /// <param name="version">This is the &#x60;version&#x60; of at.js. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeliveryResponse)</returns>
        public async System.Threading.Tasks.Task<Adobe.Target.Delivery.Client.ApiResponse<DeliveryResponse>> ExecuteWithHttpInfoAsync(string imsOrgId, string sessionId, DeliveryRequest deliveryRequest, string version = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imsOrgId' is set
            if (imsOrgId == null)
                throw new Adobe.Target.Delivery.Client.ApiException(400, "Missing required parameter 'imsOrgId' when calling DeliveryApi->Execute");

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new Adobe.Target.Delivery.Client.ApiException(400, "Missing required parameter 'sessionId' when calling DeliveryApi->Execute");

            // verify the required parameter 'deliveryRequest' is set
            if (deliveryRequest == null)
                throw new Adobe.Target.Delivery.Client.ApiException(400, "Missing required parameter 'deliveryRequest' when calling DeliveryApi->Execute");


            Adobe.Target.Delivery.Client.RequestOptions localVarRequestOptions = new Adobe.Target.Delivery.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Adobe.Target.Delivery.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Adobe.Target.Delivery.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Adobe.Target.Delivery.Client.ClientUtils.ParameterToMultiMap("", "imsOrgId", imsOrgId));
            localVarRequestOptions.QueryParameters.Add(Adobe.Target.Delivery.Client.ClientUtils.ParameterToMultiMap("", "sessionId", sessionId));
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Adobe.Target.Delivery.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            localVarRequestOptions.Data = deliveryRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeliveryResponse>("/rest/v1/delivery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Execute", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
