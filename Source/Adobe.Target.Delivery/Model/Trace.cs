// <auto-generated/>
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adobe.Target.Delivery.Client.OpenAPIDateConverter;

namespace Adobe.Target.Delivery.Model
{
    /// <summary>
    /// Enables the trace for delivery API. At present it is not be possible to set the metrics and packages for the trace. 
    /// </summary>
    [DataContract(Name = "Trace")]
    public partial class Trace : IEquatable<Trace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Trace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Trace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Trace" /> class.
        /// </summary>
        /// <param name="authorizationToken">authorizationToken (required).</param>
        /// <param name="usage">A String dictionary of client SDK usage tracking and internal diagnostics metadata. .</param>
        public Trace(string authorizationToken = default(string), Dictionary<string, string> usage = default(Dictionary<string, string>))
        {
            // to ensure "authorizationToken" is required (not null)
            this.AuthorizationToken = authorizationToken ?? throw new ArgumentNullException("authorizationToken is a required property for Trace and cannot be null");
            this.Usage = usage;
        }

        /// <summary>
        /// Gets or Sets AuthorizationToken
        /// </summary>
        [DataMember(Name = "authorizationToken", IsRequired = true, EmitDefaultValue = false)]
        public string AuthorizationToken { get; set; }

        /// <summary>
        /// A String dictionary of client SDK usage tracking and internal diagnostics metadata. 
        /// </summary>
        /// <value>A String dictionary of client SDK usage tracking and internal diagnostics metadata. </value>
        [DataMember(Name = "usage", EmitDefaultValue = false)]
        public Dictionary<string, string> Usage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trace {\n");
            sb.Append("  AuthorizationToken: ").Append(AuthorizationToken).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Trace);
        }

        /// <summary>
        /// Returns true if Trace instances are equal
        /// </summary>
        /// <param name="input">Instance of Trace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthorizationToken == input.AuthorizationToken ||
                    (this.AuthorizationToken != null &&
                    this.AuthorizationToken.Equals(input.AuthorizationToken))
                ) && 
                (
                    this.Usage == input.Usage ||
                    this.Usage != null &&
                    input.Usage != null &&
                    this.Usage.SequenceEqual(input.Usage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthorizationToken != null)
                    hashCode = hashCode * 59 + this.AuthorizationToken.GetHashCode();
                if (this.Usage != null)
                    hashCode = hashCode * 59 + this.Usage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
